version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:

  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          when: << parameters.event >>
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
#            exit 1

  npm-migration-errlog:
    description: cat npm migration error logfile
    steps:
      - run:
          name: list logfile content
          when: on_fail
          command: |
            ls -al  ~/project/backend/
            cat ~/project/.circleci/ansible/migrations_dump.txt
            cat ~/project/.circleci/ansible/migrations_err.txt
            python3 ~/project/.circleci/scratch-code/get_dump_files.py ~/project/.circleci/ansible/migrations_err.txt

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
#            exit 1
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
#            exit 1
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
            npm audit fix
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
            npm audit fix
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --region us-west-2 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#             exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --region us-west-2 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - run: ls -al
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run: ls -al ~/
#      - run: exit 1
      - run: touch ~/project/.circleci/ansible/inventory1.txt
      - run: echo "[web]" >> ~/project/.circleci/ansible/inventory1.txt
      - run: cat ~/project/.circleci/ansible/inventory1.txt
      - run: python ~/project/.circleci/ansible/inventory2.py ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/inventory1.txt
      - run: cat ~/project/.circleci/ansible/inventory1.txt
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory1.txt
      # Here's where you will add some code to rollback on failure

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory1.txt
      - add_ssh_keys:
          fingerprints: ["10:3b:72:f2:5e:80:49:a9:b0:49:a5:81:d1:0c:12:0a"]
      - run:
          name: Install dependencies
          command: 
             # install the dependencies needed for your playbook
            apk add --update ansible
#            exit 1
      - run: ls -al  /etc
      - run: chmod 400 ~/project/.circleci/ansible/udapeople.pem
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i  ~/project/.circleci/ansible/inventory1.txt --private-key=~/project/.circleci/ansible/udapeople.pem  ~/project/.circleci/ansible/configure-server.yml
#            exit 1
      # Here's where you will add some code to rollback on failure

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  run-migrations:
    docker:
      - image: circleci/node:14.18.1 # Docker image here that supports NodeJS
    steps:
      - checkout   # checkout Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > ~/project/.circleci/ansible/migrations_dump.txt 2> ~/project/.circleci/ansible/migrations_err.txt
            cat ~/project/.circleci/ansible/migrations_dump.txt
            cat ~/project/.circleci/ansible/migrations_err.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/.circleci/ansible/migrations_dump.txt
            then
            curl https://kvdb.io/H7MB23gL5pTNunVjb7aKYp/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi

      - npm-migration-errlog

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -al dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["10:3b:72:f2:5e:80:49:a9:b0:49:a5:81:d1:0c:12:0a"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar unzip gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -cvzf artifact.tar.gz backend/. 
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is --"
            cat inventory1.txt
            ansible-playbook -i inventory1.txt ~/project/.circleci/ansible/deploy-backend.yml --private-key=~/project/.circleci/ansible/udapeople.pem
            ansible-playbook -i inventory1.txt ~/project/.circleci/ansible/start-app.yml --private-key=~/project/.circleci/ansible/udapeople.pem
            # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
          event: on_fail
      - revert-migrations:
         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/aws:2022.06
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install curl
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-west-2 \
              --output text )
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            echo ${API_URL}/api/status
            curl  ${API_URL}/api/status
            if curl ${API_URL}/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          channel: circleci-udapeople
          event: fail
          template: basic_fail_1


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeopleStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com
          echo workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Get old id and Remove old stacks and files
          command: |
            export OldWorkflowID="85f4823"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Cleaning in progress"
              echo old workflow id: ${OldWorkflowID}
              echo current workflow id: "${CIRCLE_WORKFLOW_ID:0:7}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive --include "*" --include "images/*"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"              
              echo "Cleaning Done"
            else
              echo "No cleanup required---"
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
